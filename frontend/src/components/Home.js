import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import EmployeeForm from './EmployeeForm';
import jsPDF from 'jspdf';
import 'jspdf-autotable';
import './Home.css';

const Home = () => {
    const [user, setUser] = useState(null);
    const [employees, setEmployees] = useState([]);
    const [isFormVisible, setFormVisible] = useState(false);
    const [selectedEmployee, setSelectedEmployee] = useState(null);
    const navigate = useNavigate();

    useEffect(() => {
        const fetchUserAndEmployees = async () => {
            const access = localStorage.getItem('access');
            if (!access) {
                navigate('/login');
                return;
            }
            try {
                const userResponse = await axios.get('http://127.0.0.1:8000/api/user/', {
                    headers: { Authorization: `Bearer ${access}` },
                });
                setUser(userResponse.data);

                const employeesResponse = await axios.get('http://127.0.0.1:8000/api/employees/', {
                    headers: { Authorization: `Bearer ${access}` },
                });
                setEmployees(employeesResponse.data);
            } catch (error) {
                console.error('Error fetching data:', error);
                navigate('/login');
            }
        };
        fetchUserAndEmployees();
    }, [navigate]);

    const handleAddEmployee = async (employee) => {
        try {
            const response = await axios.post('http://127.0.0.1:8000/api/employees/', employee, {
                headers: { Authorization: `Bearer ${localStorage.getItem('access')}` },
            });
            setEmployees([...employees, response.data]);
            setFormVisible(false);
        } catch (error) {
            console.error('Error adding employee:', error);
        }
    };

    const handleUpdateEmployee = async (id, updatedEmployee) => {
        try {
            const response = await axios.put(`http://127.0.0.1:8000/api/employees/${id}/`, updatedEmployee, {
                headers: { Authorization: `Bearer ${localStorage.getItem('access')}` },
            });
            setEmployees(employees.map((emp) => (emp.id === id ? response.data : emp)));
            setFormVisible(false);
            setSelectedEmployee(null);
        } catch (error) {
            console.error('Error updating employee:', error);
        }
    };

    const handleDeleteEmployee = async (id) => {
        try {
            await axios.delete(`http://127.0.0.1:8000/api/employees/${id}/`, {
                headers: { Authorization: `Bearer ${localStorage.getItem('access')}` },
            });
            setEmployees(employees.filter((emp) => emp.id !== id));
        } catch (error) {
            console.error('Error deleting employee:', error);
        }
    };

    const handleLogout = () => {
        localStorage.removeItem('access');
        localStorage.removeItem('refresh');
        navigate('/login');
    };

    // const handleDownloadEmployees = async () => {
    //     try {
    //         const response = await axios.get('http://127.0.0.1:8000/api/download-employees/', {
    //             headers: { Authorization: `Bearer ${localStorage.getItem('access')}` },
    //             responseType: 'blob', // Ensure response is treated as a binary file
    //         });

    //         const url = window.URL.createObjectURL(new Blob([response.data]));
    //         const link = document.createElement('a');
    //         link.href = url;
    //         link.setAttribute('download', 'employees.pdf');
    //         document.body.appendChild(link);
    //         link.click();
    //     } catch (error) {
    //         alert('Error downloading employees:', error.response?.data || error);
    //         // if (error.response?.status === 401) {
    //         //     alert("Session expired. Please log in again.");
    //         //     localStorage.removeItem('access');
    //         //     localStorage.removeItem('refresh');
    //         //     navigate('/login');
    //         // }
    //     }
    // };

    const generatePDF = () => {
        const doc = new jsPDF();
        const generatedBy = `Generated by: ${user.username}`;
        const generatedOn = `Generated on: ${new Date().toLocaleString()}`;
        doc.setFontSize(10);                           
        doc.setTextColor(150);
        doc.text(generatedBy, 20, 25); 
        doc.text(generatedOn, 20, 30); 

        doc.setDrawColor(200); 
        doc.line(20, 18, 190, 18); 

        doc.setTextColor(0); 
        doc.setFontSize(16); 
        doc.text('Employee List', 20, 10);
        const tableData = employees.map((emp, index) => [
            index + 1,
            emp.name,
            emp.designation,
            emp.phone_number,
            emp.added_by,
            emp.modified_by,
            new Date(emp.created_on).toLocaleString(),
            new Date(emp.modified_on).toLocaleString(),
        ]);

        doc.autoTable({
            head: [
                [
                    '#',
                    'Name',
                    'Designation',
                    'Phone Number',
                    'Added By',
                    'Modified By',
                    'Created On',
                    'Modified On',
                ],
            ],
            body: tableData,
            startY: 40,
        });
        doc.save('Employee_List.pdf');
    };

    if (!user) {
        return <p>Loading...</p>;
    }

    return (
        <div>
            <h1>Welcome, {user.username}</h1>
            <button onClick={handleLogout}>Logout</button>
            <button onClick={() => setFormVisible(true)}>Add Employee</button>
            <button onClick={generatePDF}>Download Employee List</button>
            {isFormVisible && (
                <EmployeeForm
                    onAdd={handleAddEmployee}
                    onCancel={() => setFormVisible(false)}
                    selectedEmployee={selectedEmployee}
                    onUpdate={handleUpdateEmployee}
                />
            )}
            <table className="employee-table">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>Designation</th>
                        <th>Phone Number</th>
                        <th>Added By</th>
                        <th>Modified By</th>
                        <th>Created On</th>
                        <th>Modified On</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {employees.map((emp, index) => (
                        <tr key={emp.id}>
                            <td>{index + 1}</td>
                            <td>{emp.name}</td>
                            <td>{emp.designation}</td>
                            <td>{emp.phone_number}</td>
                            <td>{emp.added_by}</td>
                            <td>{emp.modified_by}</td>
                            <td>{new Date(emp.created_on).toLocaleString()}</td>
                            <td>{new Date(emp.modified_on).toLocaleString()}</td>
                            <td>
                                <button onClick={() => { setSelectedEmployee(emp); setFormVisible(true); }}>Edit</button>
                                <button onClick={() => handleDeleteEmployee(emp.id)}>Delete</button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

        </div>
    );
};

export default Home;
